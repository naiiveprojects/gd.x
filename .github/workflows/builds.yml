name: ðŸ¤ž Builds!
on:
  # Monthly
  schedule:
    - cron: "0 0 1 * *"
  
  pull_request:
    types:
      - closed
  
  # Manual
  workflow_dispatch:
    inputs:
      make-release:
        description: 'Make release'
        required: false
        type: boolean
        default: true

# Global Settings
# SCONS_CACHE for windows must be set in the build environment
env:
  # Used for cache key as well as for downloading the correct Godot version.
  GODOT_BRANCH: 3.x

jobs:
  android:
    # Based on https://github.com/godotengine/godot-build-scripts/blob/3.x/build-android/build.sh
    runs-on: "ubuntu-latest"
    name: Android ${{ matrix.name }}
    env:
      SCONSFLAGS: 
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Templates
            cache-name: android
            build-mono: false

    steps:
      # region Setup
      - uses: actions/checkout@v3

      - name: Download Godot
        uses: ./.github/actions/godot-download
        with:
          version: ${{ env.GODOT_BRANCH }}

      - name: Linux dependencies
        shell: bash
        run: |
          sudo apt-get update
          # The actual dependencies
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
              libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev \
              libdbus-1-dev libudev-dev libxi-dev libxrandr-dev yasm xvfb unzip \
              libspeechd-dev speech-dispatcher

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps
      # endregion

      # region    (target=release)
      - name: Compilation (android_arch=armv7, target=release)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} android_arch=armv7 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/android-armv7-release' || '' }} debug_symbols=no lto=full
          platform: android
          target: release
          tools: false
          encryption-key: ${{ secrets.ENCRYPTION_KEY }}
      # endregion

      - name: Package Templates
        run: |
          pushd platform/android/java
          ./gradlew generateGodotTemplates
          popd
          
          mkdir -p $HOME/out/templates
          cp bin/android_source.zip $HOME/out/templates/
          cp bin/android_release.apk $HOME/out/templates/
          cp bin/godot-lib.release.aar $HOME/out/templates/

          if ${{ matrix.build-mono }}; then
            mkdir -p $HOME/out/templates/bcl
            cp -r $HOME/mono-bcls/android-bcl/* $HOME/out/templates/bcl/
          fi

      - name: Upload Templates
        uses: ./.github/actions/upload-artifact
        with:
          path: ~/out/templates
          name: ${{ matrix.cache-name }}-templates
      # endregion
  
  javascript:
    # Based on https://github.com/godotengine/godot-build-scripts/blob/3.x/build-javascript/build.sh
    runs-on: "ubuntu-latest"
    name: JavaScript ${{ matrix.name }}
    env:
      SCONSFLAGS: mono_static=yes
      EM_VERSION: 1.39.9
      EM_CACHE_FOLDER: "emsdk-cache"
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Templates
            cache-name: javascript
            build-mono: false

    steps:
      # region Setup
      - uses: actions/checkout@v3

      - name: Download Godot
        uses: ./.github/actions/godot-download
        with:
          version: ${{ env.GODOT_BRANCH }}

      - name: Linux dependencies
        shell: bash
        run: |
          sudo apt-get update
          # The actual dependencies
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
              libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev \
              libdbus-1-dev libudev-dev libxi-dev libxrandr-dev yasm xvfb unzip \
              libspeechd-dev speech-dispatcher

      - name: Set up Emscripten latest
        uses: mymindstorm/setup-emsdk@v12
        continue-on-error: true
        with:
          version: ${{ env.EM_VERSION }}
          actions-cache-folder: ${{ matrix.cache-name }}-${{ env.EM_CACHE_FOLDER }}

      - name: Verify Emscripten setup
        run: |
          emcc -v

      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps
      # endregion

      # region Templates
      - name: Compilation (target=release)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} debug_symbols=no lto=full
          platform: javascript
          target: release
          tools: false
          encryption-key: ${{ secrets.ENCRYPTION_KEY }}

      - name: Compilation (target=release, threads_enabled=yes)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} threads_enabled=yes debug_symbols=no lto=full
          platform: javascript
          target: release
          tools: false
          encryption-key: ${{ secrets.ENCRYPTION_KEY }}

      - name: Package Templates
        run: |
          mkdir -p $HOME/out/templates
          cp -rvp bin/*.zip $HOME/out/templates
          rm -f bin/*.zip

          if ${{ matrix.build-mono }}; then
            mkdir -p $HOME/out/templates/bcl
            cp -r $HOME/mono-bcls/wasm-bcl/wasm $HOME/out/templates/bcl/
          fi
        
      - name: Upload Templates
        uses: ./.github/actions/upload-artifact
        with:
          path: ~/out/templates
          name: ${{ matrix.cache-name }}-templates
      # endregion
  
  linux:
    # Based on https://github.com/godotengine/godot-build-scripts/blob/3.x/build-linux/build.sh
    runs-on: "ubuntu-latest"
    name: Linux ${{ matrix.name }}
    env:
      SCONSFLAGS: mono_static=yes
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Templates
            cache-name: linux
            build-mono: false

    steps:
      # region Setup
      - uses: actions/checkout@v3

      - name: Download Godot
        uses: ./.github/actions/godot-download
        with:
          version: ${{ env.GODOT_BRANCH }}

      - name: Linux dependencies
        shell: bash
        run: |
          sudo apt-get install xvfb libc6-dev
      
      # region    Linux Toolchain Setup
      - name: Setup Linux toolchain (x86_64)
        uses: ./.github/actions/godot-linux-toolchain
        with:
          toolchain-name: "x86_64-godot-linux-gnu_sdk-buildroot"
      
      - name: Setup Linux toolchain (i686)
        uses: ./.github/actions/godot-linux-toolchain
        with:
          toolchain-name: "i686-godot-linux-gnu_sdk-buildroot"
      # endregion

      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps
      # endregion

      # region Templates
      - name: Compilation (tools=false, bits=64, target=release)
        uses: ./.github/actions/godot-build
        with:
          buildroot: "${{ github.workspace }}/x86_64-godot-linux-gnu_sdk-buildroot/bin"
          sconsflags: ${{ env.SCONSFLAGS }} bits=64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-linux-x86_64-release' || '' }} debug_symbols=no lto=full
          platform: linuxbsd
          target: release
          tools: false
          encryption-key: ${{ secrets.ENCRYPTION_KEY }}
      
      - name: Upload Templates (bits=64)
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}-templates-64
      
      - name: Clear bin
        run: |
          rm -rf bin
      # endregion
 
  windows:
    runs-on: "ubuntu-latest"
    name: Windows ${{ matrix.name }}
    env:
      SCONSFLAGS: use_mingw=yes
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Editor & Templates
            cache-name: windows
            build-mono: false

    steps:
      # region Setup
      - uses: actions/checkout@v3

      - name: Download Godot
        uses: ./.github/actions/godot-download
        with:
          version: ${{ env.GODOT_BRANCH }}

      - name: Linux dependencies
        shell: bash
        run: |
          sudo apt-get update
          # The actual dependencies
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
              libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev \
              libdbus-1-dev libudev-dev libxi-dev libxrandr-dev yasm xvfb unzip \
              libspeechd-dev speech-dispatcher libgl1-mesa-glx
          sudo apt-get -f install
      
      - name: Windows dependencies
        shell: bash
        run: |
          sudo apt-get install mingw-w64
          echo "1" | sudo update-alternatives --config x86_64-w64-mingw32-gcc
          echo "1" | sudo update-alternatives --config x86_64-w64-mingw32-g++
          echo "1" | sudo update-alternatives --config i686-w64-mingw32-gcc
          echo "1" | sudo update-alternatives --config i686-w64-mingw32-g++

      - name: Setup Godot build cache
        uses: ./.github/actions/godot-cache
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Setup python and scons
        uses: ./.github/actions/godot-deps
      # endregion

      # region Editor

      # region    (bits=64)
      - name: Compilation (bits=64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} bits=64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-windows-x86_64-release' || '' }} debug_symbols=no
          platform: windows
          target: release_debug
          tools: true
          encryption-key: ${{ secrets.ENCRYPTION_KEY }}
      
      - name: Upload Editor
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}-editor-64
      
      - name: Clear bin
        run: |
          rm -rf bin
      # endregion

      # endregion

      # region Templates

      # region    (bits=64)
      - name: Compilation (tools=false, bits=64, target=release)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} bits=64 ${{ matrix.build-mono && 'mono_prefix=$HOME/mono-installs/desktop-windows-x86_64-release' || '' }} debug_symbols=no
          platform: windows
          target: release
          tools: false
          encryption-key: ${{ secrets.ENCRYPTION_KEY }}

      - name: Upload Templates
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}-templates-64
      
      - name: Clear bin
        run: |
          rm -rf bin
      # endregion

      # endregion

      
  bundle-export-templates:
    needs: [ android, javascript, linux, windows]
    name: Bundle Export Templates
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Templates
            build-mono: false

    steps:
      # region Setup
      - uses: actions/checkout@v3

      - name: Download Godot
        uses: ./.github/actions/godot-download
        with:
          version: ${{ env.GODOT_BRANCH }}

      # region Download Templates      
      - name: Download Linux Templates (bits=64)
        uses: actions/download-artifact@v3
        with:
          name: linux-${{ matrix.build-mono && 'mono-' || '' }}templates-64
          path: linux-${{ matrix.build-mono && 'mono-' || '' }}templates-64

      - name: Download Windows Templates (bits=64)
        uses: actions/download-artifact@v3
        with:
          name: windows-${{ matrix.build-mono && 'mono-' || '' }}templates-64
          path: windows-${{ matrix.build-mono && 'mono-' || '' }}templates-64

      - name: Download Android Templates
        uses: actions/download-artifact@v3
        with:
          name: android-${{ matrix.build-mono && 'mono-' || '' }}templates
          path: android-${{ matrix.build-mono && 'mono-' || '' }}templates
      
      - name: Download Javascript Templates
        uses: actions/download-artifact@v3
        with:
          name: javascript-${{ matrix.build-mono && 'mono-' || '' }}templates
          path: javascript-${{ matrix.build-mono && 'mono-' || '' }}templates
      # endregion
      
      - name: Debug Print
        run: |
          ls -a
      # endregion

      - name: Setup ENV Vars
        run: |
          echo "TEMPLATES_VERSION=${{ format('{0}.{1}', env.GODOT_BRANCH, env.GODOT_VERSION_STATUS) }}${{ matrix.build-mono && '.mono' || '' }}" >> $GITHUB_ENV

          echo "RELDIR=$HOME/releases" >> $GITHUB_ENV
          echo "GODOT_BASENAME=Godot_v${{ format('{0}-{1}', env.GODOT_BRANCH, env.GODOT_VERSION_STATUS) }}" >> $GITHUB_ENV
          echo "TEMPLATES_DIR=$HOME/templates" >> $GITHUB_ENV

      - name: Setup Directories
        run: |
          mkdir -p ${{ env.TEMPLATES_DIR }}
          mkdir -p ${{ env.RELDIR }}

      - name: Bundle Linux
        run: |
          if ${{ matrix.build-mono }}; then
            cp -rp linux-mono-templates-64/data.mono.x11.64* ${{ env.TEMPLATES_DIR }}/
            mkdir -p ${{ env.TEMPLATES_DIR }}/bcl
          fi
          cp linux-${{ matrix.build-mono && 'mono-' || '' }}templates-64/godot.x11.opt.64${{ matrix.build-mono && '.mono' || '' }} ${{ env.TEMPLATES_DIR }}/linux_x11_64_release
          strip ${{ env.TEMPLATES_DIR }}/linux_x11_*

      - name: Bundle Windows
        run: |
          if ${{ matrix.build-mono }}; then
            cp -rp windows-mono-templates-64/data.mono.windows.64* ${{ env.TEMPLATES_DIR }}/
            cp -rp windows-mono-templates-32/data.mono.windows.32* ${{ env.TEMPLATES_DIR }}/
            mkdir -p ${{ env.TEMPLATES_DIR }}/bcl
            cp -r windows-mono-editor-64/GodotSharp/Mono/lib/mono/4.5/ ${{ env.TEMPLATES_DIR }}/bcl/net_4_x_win
          fi
          cp windows-${{ matrix.build-mono && 'mono-' || '' }}templates-64/godot.windows.opt.64${{ matrix.build-mono && '.mono' || '' }}.exe ${{ env.TEMPLATES_DIR }}/windows_64_release.exe
          strip ${{ env.TEMPLATES_DIR }}/windows*.exe

      - name: Bundle Javascript
        run: |
          if ${{ matrix.build-mono }}; then
              mkdir -p ${{ env.TEMPLATES_DIR }}/bcl
              cp -r javascript-mono-templates/bcl/wasm ${{ env.TEMPLATES_DIR }}/bcl/
          fi
          cp javascript-${{ matrix.build-mono && 'mono-' || '' }}templates/godot.javascript.opt${{ matrix.build-mono && '.mono' || '' }}.zip ${{ env.TEMPLATES_DIR }}/webassembly_release.zip
          # TODO: Create threads and gdnative
          # cp javascript-${{ matrix.build-mono && 'mono-' || '' }}templates/godot.javascript.opt.threads${{ matrix.build-mono && '.mono' || '' }}.zip ${{ env.TEMPLATES_DIR }}/webassembly_threads_release.zip

      - name: Bundle Android
        run: |
          if ${{ matrix.build-mono }}; then
            mkdir -p ${{ env.TEMPLATES_DIR }}/bcl
            cp -r android-mono-templates/bcl/godot_android_ext ${{ env.TEMPLATES_DIR }}/bcl/
            cp -r android-mono-templates/bcl/monodroid ${{ env.TEMPLATES_DIR }}/bcl/
          fi
          cp android-${{ matrix.build-mono && 'mono-' || '' }}templates/godot-lib.release.aar ${{ env.RELDIR }}/godot-lib.${{ env.TEMPLATES_VERSION }}.release.aar
          cp android-${{ matrix.build-mono && 'mono-' || '' }}templates/*.apk ${{ env.TEMPLATES_DIR }}/
          cp android-${{ matrix.build-mono && 'mono-' || '' }}templates/android_source.zip ${{ env.TEMPLATES_DIR }}/

      - name: Create Templates TPZ
        run: |
          echo "${{ env.TEMPLATES_VERSION }}" > ${{ env.TEMPLATES_DIR }}/version.txt
          pushd ${{ env.TEMPLATES_DIR }}/..
          zip -q -9 -r -D "${{ env.RELDIR }}/${{ env.GODOT_BASENAME }}_export-templates${{ matrix.build-mono && '-mono' || '' }}.tpz" templates/*
          popd

      - name: Upload Android Template
        uses: ./.github/actions/upload-artifact
        with:
          path: ${{ env.RELDIR }}/godot-lib.${{ env.TEMPLATES_VERSION }}.release.aar
          name: android-library${{ matrix.build-mono && '-mono' || '' }}
      
      - name: Upload Export Templates TPZ
        uses: ./.github/actions/upload-artifact
        with:
          path: ${{ env.RELDIR }}/${{ env.GODOT_BASENAME }}_export-templates${{ matrix.build-mono && '-mono' || '' }}.tpz
          name: export-templates${{ matrix.build-mono && '-mono' || '' }}

  create-release:
    if: success() && (
        (github.event_name == 'push') ||
        (github.event_name == 'schedule') ||
        (github.event_name == 'workflow_dispatch' && inputs.make-release)
      )
    needs: [android, javascript, linux, windows, bundle-export-templates]
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag-name.outputs.tag }}
    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Short SHA
        id: short-sha
        run: echo "sha7=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT
      
      - name: Tag Name
        id: tag-name
        run: echo "tag=Release-${{ steps.date.outputs.date }}-${{ steps.short-sha.outputs.sha7 }}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag-name.outputs.tag }}
          name: Release ${{ steps.date.outputs.date }} #${{ steps.short-sha.outputs.sha7 }}
          draft: false
          prerelease: false
  
  upload-release-export-templates: 
    if: success() && (
        (github.event_name == 'pull_request') ||
        (github.event_name == 'schedule') ||
        (github.event_name == 'workflow_dispatch' && inputs.make-release)
      )
    needs: create-release
    name: Upload Release Export Templates
    runs-on: ubuntu-latest
    strategy:
      matrix:
        artifact_name: [
          # Regular builds
          export-templates
        ]
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: ./

      - name: Debug
        shell: bash
        run: ls
      
      - name: Upload Artifact
        uses: softprops/action-gh-release@v0.1.15
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.create-release.outputs.tag }}
          files: ./Godot_v${{ env.GODOT_BRANCH }}-_${{ matrix.artifact_name }}.tpz

  upload-release-artifacts: 
    if: success() && (
        (github.event_name == 'pull_request') ||
        (github.event_name == 'schedule') ||
        (github.event_name == 'workflow_dispatch' && inputs.make-release)
      )
    needs: create-release
    name: Upload Release Artifacts
    runs-on: ubuntu-latest
    strategy:
      matrix:
        artifact_name: [
          # Regular builds
          linux-templates-64,
          windows-editor-64,
          windows-templates-64,
          android-templates,
          javascript-templates,
          android-library
        ]
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: ./${{ matrix.artifact_name }}
      
      - name: Zip Artifact
        run: |
          original_path=$(pwd)
          pushd ${{ matrix.artifact_name }}
          zip -ry ${original_path}/${{ matrix.artifact_name }}.zip *
          popd

      - name: Debug
        shell: bash
        run: ls

      - name: Upload Artifact
        uses: softprops/action-gh-release@v0.1.15
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.create-release.outputs.tag }}
          files: ./${{ matrix.artifact_name }}.zip